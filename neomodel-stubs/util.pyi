# Stubs for neomodel.util (Python 3)

from threading import local
from typing import (Any, Callable, Dict, Generic, List, Optional, Tuple, Type,
                    TypeVar, cast)

from .core import StructuredNode
from .exceptions import (ConstraintValidationFailed, ModelDefinitionMismatch,
                         UniqueProperty)
from .match import NodeSet

logger: Any

def ensure_connection(func: Callable) -> Callable: ...
def change_neo4j_password(db: Database, new_password: str) -> None: ...
def clear_neo4j_database(db: Database) -> None: ...

class NodeClassRegistry:
    _NODE_CLASS_REGISTRY: Dict = ...
    def __init__(self) -> None: ...

class Database(local, NodeClassRegistry):
    url: str = ...
    driver: Any = ...
    def __init__(self) -> None: ...
    def set_connection(self, url: Any) -> None: ...
    @property
    def transaction(self) -> TransactionProxy: ...
    @property
    def write_transaction(self) -> TransactionProxy: ...
    @property
    def read_transaction(self) -> TransactionProxy: ...
    def begin(self, access_mode: Optional[Any] = ...) -> None: ...
    # TODO: commit returns a type linked to the underlying neo4j package, but we're not
    # going to start typing that one now :)
    def commit(self) -> Any: ...
    def rollback(self) -> None: ...
    def cypher_query(
        self,
        query: str,
        params: Optional[Dict] = ...,
        handle_unique: bool = ...,
        retry_on_session_expire: bool = ...,
        resolve_objects: bool = ...,
    ) -> Tuple[List[List[Any]], List[str]]: ...

class TransactionProxy:
    db: Database = ...
    access_mode: str = ...
    def __init__(self, db: Database, access_mode: Optional[str] = ...) -> None: ...
    def __enter__(self) -> "TransactionProxy": ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...
    def __call__(self, func: Callable[..., Any]) -> Callable[..., Any]: ...

def deprecated(message: str) -> Callable: ...

T = TypeVar("T")

# TODO: there seems to be a bug in mypy that prevents this pattern from working
# see https://github.com/python/mypy/issues/2563
def classproperty(f: Callable[[Type[T]], NodeSet[T]]) -> NodeSet[T]:
    class cpf(Generic[T]):  # type: ignore
        def __init__(self, getter: Callable[[Type[T]], NodeSet[T]]) -> None: ...
        def __get__(self, obj: Any, type: Type[T]) -> NodeSet[T]: ...
    return cast(NodeSet[T], cpf(f))

class _UnsavedNode: ...

def _get_node_properties(node: StructuredNode) -> Any: ...
