# Stubs for neomodel.core (Python 3)

from typing import Any, Dict, List, Optional, Tuple, Type, TypeVar

from .match import NodeSet
from .properties import PropertyManager
from .util import Database, classproperty

db: Database

def drop_constraints(quiet: bool = ..., stdout: Optional[Any] = ...) -> None: ...
def drop_indexes(quiet: bool = ..., stdout: Optional[Any] = ...) -> None: ...
def remove_all_labels(stdout: Optional[Any] = ...) -> None: ...
def install_labels(cls, quiet: bool = ..., stdout: Optional[Any] = ...) -> None: ...
def install_all_labels(stdout: Optional[Any] = ...): ...

class NodeMeta(type):
    def __new__(
        mcs: Any, name: str, bases: Tuple, namespace: Dict[str, Any]
    ) -> Any: ...  # type: ignore

# FIXME: PropertyManager is a parent class of NodeBase !
class NodeBase(PropertyManager, metaclass=NodeMeta):
    pass

NodeType = TypeVar("NodeType", bound="StructuredNode")

class StructuredNode(NodeBase):
    __abstract_node__: bool = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @classproperty
    def nodes(cls: Type[NodeType]) -> NodeSet[Type[NodeType]]: ...
    @classmethod
    def category(cls) -> None: ...
    @classmethod
    def create(cls, *props: Any, **kwargs: Any) -> List: ...
    @classmethod
    def create_or_update(cls, *props: Any, **kwargs: Any): ...
    def cypher(self, query: str, params: Optional[Dict] = ...) -> Tuple[List, Any]: ...
    deleted: bool = ...
    def delete(self): ...
    @classmethod
    def get_or_create(cls: Type[NodeType], *props: Any, **kwargs: Any) -> NodeType: ...
    @classmethod
    def inflate(cls: Type[NodeType], node: Any) -> NodeType: ...
    @classmethod
    def inherited_labels(cls): ...
    def labels(self) -> List: ...
    def refresh(self) -> None: ...
    id: str = ...
    def save(self: NodeType) -> NodeType: ...
