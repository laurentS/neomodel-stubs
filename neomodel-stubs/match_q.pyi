# Stubs for neomodel.match_q (Python 3)

from typing import Any, Dict, List, Optional


class QBase:
    default: str = ...
    children: List = ...
    connector: Any = ...
    negated: bool = ...
    def __init__(
        self,
        children: Optional[Any] = ...,
        connector: Optional[Any] = ...,
        negated: bool = ...,
    ) -> None: ...
    def __deepcopy__(self, memodict: Dict) -> "QBase": ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __contains__(self, other: Any) -> bool: ...
    def __eq__(self, other: Any) -> bool: ...
    def __hash__(self) -> int: ...
    def add(self, data: Any, conn_type: Any, squash: bool = ...) -> "QBase": ...
    def negate(self) -> None: ...

class Q(QBase):
    AND: str = ...
    OR: str = ...
    default: str = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __or__(self, other: Optional["Q"]) -> "Q": ...
    def __and__(self, other: Optional["Q"]) -> "Q": ...
    def __invert__(self) -> "Q": ...
