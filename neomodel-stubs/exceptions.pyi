# Stubs for neomodel.exceptions (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class NeomodelException(Exception): ...
class AttemptedCardinalityViolation(NeomodelException): ...

class CardinalityViolation(NeomodelException):
    rel_manager: Any = ...
    actual: Any = ...
    def __init__(self, rel_manager: Any, actual: Any) -> None: ...

class ModelDefinitionException(NeomodelException):
    db_node_class: Any = ...
    current_node_class_registry: Any = ...
    def __init__(self, db_node_class: Any, current_node_class_registry: Any) -> None: ...

class ModelDefinitionMismatch(ModelDefinitionException): ...
class ClassAlreadyDefined(ModelDefinitionException): ...

class ConstraintValidationFailed(ValueError, NeomodelException):
    message: Any = ...
    def __init__(self, msg: Any) -> None: ...

class DeflateError(ValueError, NeomodelException):
    property_name: Any = ...
    node_class: Any = ...
    msg: Any = ...
    obj: Any = ...
    def __init__(self, key: Any, cls: Any, msg: Any, obj: Any) -> None: ...

class DoesNotExist(NeomodelException):
    message: Any = ...
    def __init__(self, msg: Any) -> None: ...
    def __reduce__(self): ...

class InflateConflict(NeomodelException):
    cls_name: Any = ...
    property_name: Any = ...
    value: Any = ...
    nid: Any = ...
    def __init__(self, cls: Any, key: Any, value: Any, nid: Any) -> None: ...

class InflateError(ValueError, NeomodelException):
    property_name: Any = ...
    node_class: Any = ...
    msg: Any = ...
    obj: Any = ...
    def __init__(self, key: Any, cls: Any, msg: Any, obj: Optional[Any] = ...) -> None: ...

class DeflateConflict(InflateConflict):
    cls_name: Any = ...
    property_name: Any = ...
    value: Any = ...
    nid: Any = ...
    def __init__(self, cls: Any, key: Any, value: Any, nid: Any) -> None: ...

class MultipleNodesReturned(ValueError, NeomodelException):
    message: Any = ...
    def __init__(self, msg: Any) -> None: ...

class NotConnected(NeomodelException):
    action: Any = ...
    node1: Any = ...
    node2: Any = ...
    def __init__(self, action: Any, node1: Any, node2: Any) -> None: ...

class RequiredProperty(NeomodelException):
    property_name: Any = ...
    node_class: Any = ...
    def __init__(self, key: Any, cls: Any) -> None: ...

class UniqueProperty(ConstraintValidationFailed):
    message: Any = ...
    def __init__(self, msg: Any) -> None: ...
