# Stubs for neomodel.relationship_manager (Python 3)

from typing import (Any, Callable, Dict, Iterator, List, Optional, Type,
                    TypeVar, Union)

from .core import StructuredNode
from .exceptions import NotConnected
from .match import EITHER, INCOMING, OUTGOING, NodeSet, Traversal, _rel_helper
from .relationship import StructuredRel
from .util import _get_node_properties, deprecated

basestring = str

F = TypeVar("F", bound=Callable[..., Any])

def check_source(fn: F) -> F: ...

class RelationshipManager:
    source: Any = ...
    source_class: Any = ...
    name: Any = ...
    definition: Any = ...
    def __init__(self, source: Any, key: Any, definition: Any) -> None: ...
    def connect(
        self, node: StructuredNode, properties: Optional[Dict] = ...
    ) -> StructuredRel: ...
    def replace(
        self, node: StructuredNode, properties: Optional[Dict] = ...
    ) -> None: ...
    def relationship(self, node: StructuredNode) -> StructuredRel: ...
    def all_relationships(self, node: StructuredNode) -> List[StructuredRel]: ...
    def reconnect(self, old_node: StructuredNode, new_node: StructuredNode) -> None: ...
    def disconnect(self, node: StructuredNode) -> None: ...
    def disconnect_all(self) -> None: ...
    def get(self, **kwargs: Any) -> StructuredNode: ...
    def get_or_none(self, **kwargs: Any) -> Optional[StructuredNode]: ...
    def search(self, **kwargs: Any) -> NodeSet: ...
    def filter(self, **kwargs: Any) -> NodeSet: ...
    def order_by(self, *props: Any) -> NodeSet: ...
    def exclude(self, **kwargs: Any) -> NodeSet: ...
    def is_connected(self, node: StructuredNode) -> bool: ...
    def single(self) -> StructuredNode: ...
    def match(self, **kwargs: Any) -> NodeSet: ...
    def all(self) -> List[StructuredNode]: ...
    def __iter__(self) -> Iterator: ...
    def __len__(self) -> int: ...
    def __bool__(self) -> bool: ...
    def __nonzero__(self) -> bool: ...
    def __contains__(self, obj: Any) -> bool: ...
    def __getitem__(
        self, key: Union[int, slice]
    ) -> Union[StructuredNode, List[StructuredNode]]: ...

class RelationshipDefinition:
    module_name: str = ...
    module_file: str = ...
    manager: Any = ...
    definition: Dict[str, Any] = ...
    def __init__(
        self,
        relation_type: Any,
        cls_name: Any,
        direction: Any,
        manager: Any = ...,
        model: Optional[Any] = ...,
    ) -> None: ...
    def build_manager(self, source: Any, name: Any) -> RelationshipManager: ...

class ZeroOrMore(RelationshipManager):
    description: str = ...

def RelationshipTo(
    cls_name: Union[str, object],
    rel_type: str,
    cardinality: Any = ...,
    model: Optional[Type[StructuredRel]] = ...,
) -> Any: ...
def RelationshipFrom(
    cls_name: Union[str, object],
    rel_type: str,
    cardinality: Any = ...,
    model: Optional[Type[StructuredRel]] = ...,
) -> Any: ...
def Relationship(
    cls_name: Union[str, object],
    rel_type: str,
    cardinality: Any = ...,
    model: Optional[Type[StructuredRel]] = ...,
) -> Any: ...
