# Stubs for neomodel.relationship_manager (Python 3)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from .core import StructuredNode
from .exceptions import NotConnected
from .match import EITHER, INCOMING, NodeSet, OUTGOING, Traversal, _rel_helper
from .relationship import StructuredRel
from .util import _get_node_properties, deprecated
from typing import Any, Optional

basestring = str


def check_source(fn: Any): ...


class RelationshipManager:
    source: Any = ...
    source_class: Any = ...
    name: Any = ...
    definition: Any = ...
    def __init__(self, source: Any, key: Any, definition: Any) -> None: ...
    def connect(self, node: Any, properties: Optional[Any] = ...): ...
    def replace(self, node: Any, properties: Optional[Any] = ...) -> None: ...
    def relationship(self, node: Any): ...
    def all_relationships(self, node: Any): ...
    def reconnect(self, old_node: Any, new_node: Any) -> None: ...
    def disconnect(self, node: Any) -> None: ...
    def disconnect_all(self) -> None: ...
    def get(self, **kwargs: Any) -> StructuredNode: ...
    def get_or_none(self, **kwargs: Any) -> Optional[StructuredNode]: ...
    def search(self, **kwargs: Any): ...
    def filter(self, **kwargs: Any): ...
    def order_by(self, *props: Any): ...
    def exclude(self, **kwargs: Any): ...
    def is_connected(self, node: Any): ...
    def single(self): ...
    def match(self, **kwargs: Any): ...
    def all(self): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __bool__(self): ...
    def __nonzero__(self): ...
    def __contains__(self, obj: Any): ...
    def __getitem__(self, key: Any): ...


class RelationshipDefinition:
    module_name: Any = ...
    module_file: Any = ...
    manager: Any = ...
    definition: Any = ...
    def __init__(self, relation_type: Any, cls_name: Any, direction: Any, manager: Any = ..., model: Optional[Any] = ...) -> None: ...
    def build_manager(self, source: Any, name: Any): ...


class ZeroOrMore(RelationshipManager):
    description: str = ...


def RelationshipTo(cls_name: Any, rel_type: str, cardinality: Any = ..., model: Optional[Any] = ...): ...


def RelationshipFrom(cls_name: Any, rel_type: str, cardinality: Any = ..., model: Optional[Any] = ...): ...


def Relationship(cls_name: Any, rel_type: str, cardinality: Any = ..., model: Optional[Any] = ...): ...
